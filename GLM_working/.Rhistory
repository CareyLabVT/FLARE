OGM_doc_error,OGM_poc_error, OGM_don_error ,OGM_pon_error,OGM_dop_error,OGM_pop_error,
PHY_CYANOPCH1_error,PHY_CYANONPCH2_error,PHY_CHLOROPCH3_error,PHY_DIATOMPCH4_error,
ZOO_COPEPODS1_error,ZOO_DAPHNIABIG2_error,ZOO_DAPHNIASMALL3_error)
#Extract observations
catwalk_fname <- paste0(mia_location,'/','Catwalk.csv')
#PROCESS TEMPERATURE OBSERVATIONS
TempObservedDepths <- c(0.1, 1, 2, 3, 4, 5, 6, 7, 8,9)
obs_temp <- extract_temp_chain(fname = catwalk_fname,full_time,depths = the_depths_init,TempObservedDepths = TempObservedDepths,
input_tz = 'EST5EDT', output_tz = reference_tzone)
for(i in 1:length(obs_temp$obs[,1])){
for(j in 1:length(obs_temp$obs[1,])){
if(obs_temp$obs[i,j] == 0 | is.na(obs_temp$obs[i,j]) | is.nan(obs_temp$obs[i,j])){
obs_temp$obs[i,j] = NA
}
}
}
init_temps <- obs_temp$obs[1,]
#PROCESS DO OBSERVATIONS
DoObservedDepths <- c(1,5,9)
obs_do <- extract_do_chain(fname = catwalk_fname,full_time,depths = the_depths_init,DoObservedDepths= DoObservedDepths,
input_tz = 'EST5EDT', output_tz = reference_tzone)
obs_do$obs <- obs_do$obs*1000/32  #mg/L (obs units) -> mmol/m3 (glm units)
init_do1 <- obs_do$obs[1,]
Chla_fDOM_ObservedDepths <- 1
obs_chla_fdom <- extract_chla_chain(fname = catwalk_fname,full_time,depths = the_depths_init,Chla_fDOM_ObservedDepths= Chla_fDOM_ObservedDepths,
input_tz = 'EST5EDT', output_tz = reference_tzone)
#Use the CTD observation rather than the sensor string when CTD data is avialable
if(USE_CTD){
## LOOK AT CTD DATA
fl <- c(list.files('/Users/quinn/Dropbox (VTFRS)/Research/SSC_forecasting/SCC_data/preSCC/', pattern = 'CTD', full.names = TRUE))
#NEED TO DOUBLE CHECK TIME ZONE
obs_ctd <- extract_temp_CTD(fname = fl[1],full_time_day_local,depths = the_depths_init,input_tz = 'EST5EDT', output_tz = reference_tzone)
obs_ctd$obs_do <- obs_ctd$obs_do*1000/32
for(i in 1:length(full_time_day)){
if(!is.na(obs_ctd$obs_temp[i,1])){
obs_temp$obs[i,] <- obs_ctd$obs_temp[i,]
obs_do$obs[i,] <- obs_ctd$obs_do[i,]
obs_chla_fdom$Chla_obs[i,] <- obs_ctd$obs_chla[i,]
}
}
init_pH_obs <- obs_ctd$obs_pH[1,which(!is.na(obs_ctd$obs_pH[1,]))]
init_obs_pH_depths <- the_depths_init[which(!is.na(obs_ctd$obs_pH[1,]))]
init_sal_obs <- obs_ctd$obs_sal[1,which(!is.na(obs_ctd$obs_sal[1,]))]
init_obs_sal_depths <- the_depths_init[which(!is.na(obs_ctd$obs_sal[1,]))]
}
init_temps_obs <- obs_temp$obs[1,which(!is.na(obs_temp$obs[1,]))]
init_obs_temp_depths <- the_depths_init[which(!is.na(obs_temp$obs[1,]))]
init_do_obs <- obs_do$obs[1,which(!is.na(obs_do$obs[1,]))]
init_obs_do_depths <- the_depths_init[which(!is.na(obs_do$obs[1,]))]
#NEED AN ERROR CHECK FOR WHETHER THERE ARE OBSERVED DATA
if(is.na(restart_file)){
if((length(which(init_temps_obs != 0.0)) == 0) | length(which(is.na(init_temps_obs))) >0){
print('Pick another start day or provide an initial condition file: observations not avialable for starting day')
break
}
temp_inter <- approxfun(init_obs_temp_depths,init_temps_obs,rule=2)
the_temps_init <- temp_inter(the_depths_init)
if(include_wq){
do_inter <- approxfun(init_obs_do_depths,init_do_obs,rule=2)
do_init <- do_inter(the_depths_init)
if(length(which(!is.na(init_pH_obs)))>0){
pH_inter <- approxfun(init_obs_pH_depths,init_pH_obs,rule=2)
pH_init <- pH_inter(the_depths_init)
}
}
}
#SET UP INITIAL CONDITIONS
if(include_wq){
temp_start <- 1
temp_end <- length(the_depths_init)
wq_start <- rep(NA,num_wq_vars)
wq_end <- rep(NA,num_wq_vars)
for(wq in 1:num_wq_vars){
if(wq == 1){
wq_start[wq] <- temp_end+1
wq_end[wq] <- temp_end + (length(the_depths_init))
}else{
wq_start[wq] <- wq_end[wq-1]+1
wq_end[wq] <- wq_end[wq-1] + (length(the_depths_init))
}
if(npars > 0){ #NEED TO GENERALIZE
par1 <- wq_end[num_wq_vars] + 1
par2 <- par1 + 1
par3 <-  par2 + 1
}else{
par1 <- wq_end[num_wq_vars]
par2 <- wq_end[num_wq_vars]
par3 <- wq_end[num_wq_vars]
}
}
}else{
temp_start <- 1
temp_end <- length(the_depths_init)
if(npars > 0){
par1 <- temp_end + 1
par2 <- par1 + 1
par3 <-  par2 + 1
}else{
par1 <- temp_end
par2 <- temp_end
par3 <- temp_end
}
}
#UPDATE NML WITH PARAMETERS AND INITIAL CONDITIONS
if(include_wq){
OXY_oxy_init_depth <- do_init #rep(OXY_oxy_init,nlayers_init)
}else{
OXY_oxy_init_depth <- rep(OXY_oxy_init,nlayers_init)
}
if(include_wq & USE_CTD){
CAR_pH_init_depth <- pH_init
}else{
CAR_pH_init_depth <- rep(CAR_pH_init,nlayers_init)
}
CAR_dic_init_depth <- rep(CAR_dic_init,nlayers_init)
CAR_ch4_init_depth <- rep(CAR_ch4_init,nlayers_init)
SIL_rsi_init_depth <- rep(SIL_rsi_init,nlayers_init)
NIT_amm_init_depth <- rep(NIT_amm_init,nlayers_init)
NIT_nit_init_depth <- rep(NIT_nit_init,nlayers_init)
PHS_frp_init_depth <- rep(PHS_frp_init,nlayers_init)
OGM_doc_init_depth <- rep(OGM_doc_init,nlayers_init)
OGM_poc_init_depth <- rep(OGM_poc_init,nlayers_init)
OGM_don_init_depth <- rep(OGM_don_init,nlayers_init)
OGM_pon_init_depth <- rep(OGM_pon_init,nlayers_init)
OGM_dop_init_depth <- rep(OGM_dop_init,nlayers_init)
OGM_pop_init_depth <- rep(OGM_pop_init,nlayers_init)
PHY_CYANOPCH1_init_depth <- rep(PHY_CYANOPCH1_init,nlayers_init)
PHY_CYANONPCH2_init_depth <- rep(PHY_CYANONPCH2_init,nlayers_init)
PHY_CHLOROPCH3_init_depth <- rep(PHY_CHLOROPCH3_init,nlayers_init)
PHY_DIATOMPCH4_init_depth <- rep(PHY_DIATOMPCH4_init,nlayers_init)
ZOO_COPEPODS1_init_depth <- rep(ZOO_COPEPODS1_init,nlayers_init)
ZOO_DAPHNIABIG2_init_depth <- rep(ZOO_DAPHNIABIG2_init,nlayers_init)
ZOO_DAPHNIASMALL3_init_depth <- rep(ZOO_DAPHNIASMALL3_init,nlayers_init)
#if(full_time_day_local[1] == as.data.frame.POSIXct('201')
#curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
#mg/L
#curr_values <- c(3.764, 3.781, 3.578, 5.156, 5.2735, 5.5165, 5.222, 5.368)
#inter <- approxfun(curr_depths,curr_values,rule=2)
#CAR_dic_init_depth <- inter(the_depths_init)
#curr_depths <- c(0.1,1.6,3.8,5,6.2,8,9,9.5)
#umol CH4/L
#curr_values <- c(3.91E-04,0.370572728,0.107597836,0.126096596,0.088502664,0.086276629,0.07256043,0.07249431)
#inter <- approxfun(curr_depths,curr_values,rule=2)
#CAR_ch4_init_depth <- inter(the_depths_init)
#curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
#curr_values <- c(12.65291714,4.213596723,10.5935375,13.43611258,11.34765394,11.95676704,11.98577285,12.82695814)
#ug/L
#inter <- approxfun(curr_depths,curr_values,rule=2)
#NIT_amm_init_depth <- inter(the_depths_init)
#curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
#curr_values <-c(5.68,3.82,4.46,3.71,4.18,5.08,3.01,7.72)
#ug/L
#inter <- approxfun(curr_depths,curr_values,rule=2)
#NIT_nit_init_depth <- inter(the_depths_init)
#curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
#ug/L
#curr_values <- c(8.96,7.66,6.26,6.22,7.72,9.69,7.95,10.5)
#inter <- approxfun(curr_depths,curr_values,rule=2)
#PHS_frp_init_depth <- inter(the_depths_init)
#curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
##mg/L
#curr_values <- c(4.2315,4.374, 3.2655,2.9705,2.938,2.922,2.773,2.9525)
#inter <- approxfun(curr_depths,curr_values,rule=2)
#OGM_poc_init_depth <- inter(the_depths_init)
#}else{
#}
wq_init_vals <- c(OXY_oxy_init_depth,
CAR_pH_init_depth,
CAR_dic_init_depth,
CAR_ch4_init_depth,
SIL_rsi_init_depth,
NIT_amm_init_depth,
NIT_nit_init_depth,
PHS_frp_init_depth,
OGM_doc_init_depth,
OGM_poc_init_depth,
OGM_don_init_depth,
OGM_pon_init_depth,
OGM_dop_init_depth,
OGM_pop_init_depth,
PHY_CYANOPCH1_init_depth,
PHY_CYANONPCH2_init_depth,
PHY_CHLOROPCH3_init_depth,
PHY_DIATOMPCH4_init_depth,
ZOO_COPEPODS1_init_depth,
ZOO_DAPHNIABIG2_init_depth,
ZOO_DAPHNIASMALL3_init_depth)
#UPDATE NML WITH PARAMETERS AND INITIAL CONDITIONS
if(include_wq){
update_var(wq_init_vals,'wq_init_vals',workingGLM)
update_var(num_wq_vars,'num_wq_vars',workingGLM)
}else{
update_var(' ','wq_init_vals',workingGLM)
update_var(0,'num_wq_vars',workingGLM)
}
update_var(nlayers_init,'num_depths',workingGLM)
update_var(the_depths_init,'the_depths',workingGLM)
update_var(rep(the_sals_init,nlayers_init),'the_sals',workingGLM)
#NUMBER OF STATE SIMULATED = SPECIFIED DEPTHS
if(include_wq){
nstates <- nlayers_init*(1+num_wq_vars)
}else{
nstates <- nlayers_init
}
if(include_wq){
nobs <- length(TempObservedDepths) + length(DoObservedDepths)
}else{
nobs <- length(TempObservedDepths)
}
#Observations for each observed state at each time step
#an observation with at least 1 observation but without an observation in a time-step gets assigned an NA
#z <- t(matrix(rep(NA,nobs), nrow = nobs, ncol = nsteps))
if(include_wq){
z <- cbind(obs_temp$obs,obs_do$obs)
}else{
z <- cbind(obs_temp$obs)
}
z_obs <- z
if(!USE_OBS_CONTRAINT){
z[,] <- NA
}
#FIGURE OUT WHICH DEPTHS HAVE OBSERVATIONS
if(include_wq){
obs_index <- rep(NA,length(the_depths_init)*(num_wq_vars+1))
obs_index[1:length(the_depths_init)] <- seq(1,length(the_depths_init),1)
for(wq in 1:num_wq_vars){
obs_index[wq_start[wq]:wq_end[wq]] <- seq(wq_start[wq],wq_end[wq],1)
}
}else{
obs_index <- rep(NA,length(the_depths_init))
obs_index[1:length(the_depths_init)] <- seq(1,length(the_depths_init),1)
}
#Matrix for knowing which state the observation corresponds to
z_states <- t(matrix(obs_index, nrow = length(obs_index), ncol = nsteps))
#Process error
if(is.na(cov_matrix)){
Qt <- read.csv(paste0(workingGLM,'/','Qt_cov_matrix.csv'))
}else{
Qt <- read.csv(paste0(workingGLM,'/',cov_matrix))
}
if(include_wq){
for(i in 1:num_wq_vars){
for(j in 1:nlayers_init){
Qt <- rbind(Qt,rep(0.0,ncol(Qt)))
Qt <- cbind(Qt,rep(0.0,nrow(Qt)))
Qt[ncol(Qt),nrow(Qt)] <- wq_var_error[i]
}
}
}
#Covariance matrix for parameters
Qt_pars <- matrix(data = 0,nrow = npars, ncol = npars)
diag(Qt_pars) <- c(zone1temp_init_Qt,zone2temp_init_Qt,kw_init_Qt)
psi <- rep(obs_error,length(obs_index))
### INITILIZE FIRST TIME STEP
restart_present <- FALSE
if(!is.na(restart_file)){
if(file.exists(restart_file)){
restart_present <- TRUE
}
}
x <- array(NA,dim=c(nsteps,nmembers,nstates + npars))
x_prior <- array(NA,dim=c(nsteps,nmembers,nstates + npars))
#Initial conditions
if(!restart_present){
if(include_wq){
if(npars > 0){
x[1,,1:nstates] <- rmvnorm(n=nmembers, mean=c(the_temps_init,wq_init_vals), sigma=as.matrix(Qt))
x[1,,(nstates+1):(nstates+npars)] <- rmvnorm(n=nmembers, mean=c(zone1_temp,zone2_temp,kw_init),sigma = as.matrix(Qt_pars))
if(INITIAL_CONDITION_UNCERTAINITY == FALSE){
for(m in 1:nmembers){
x[1,m,] <- c(the_temps_init,wq_init_vals,zone1_temp,zone2_temp,kw_init)
}
}
}else{
x[1,,] <- rmvnorm(n=nmembers, mean=c(the_temps_init,wq_init_vals), sigma=as.matrix(Qt))
if(INITIAL_CONDITION_UNCERTAINITY == FALSE){
for(m in 1:nmembers){
x[1,m,] <- c(the_temps_init,do_init,wq_init_vals)
}
}
}
}else{
if(npars > 0){
x[1,,1:nstates] <- rmvnorm(n=nmembers, mean=c(the_temps_init), sigma=as.matrix(Qt))
x[1,,(nstates+1):(nstates+npars)] <- rmvnorm(n=nmembers, mean=c(zone1_temp,zone2_temp,kw_init),sigma = as.matrix(Qt_pars))
if(INITIAL_CONDITION_UNCERTAINITY == FALSE){
for(m in 1:nmembers){
x[1,m,] <- c(the_temps_init,zone1_temp,zone2_temp,kw_init)
}
}
}else{
x[1,,] <- rmvnorm(n=nmembers, mean=c(the_temps_init), sigma=as.matrix(Qt))
if(INITIAL_CONDITION_UNCERTAINITY == FALSE){
for(m in 1:nmembers){
if(npars > 0){
x[1,m,] <- c(the_temps_init)
}
}
}
}
}
if(include_wq){
for(m in 1:nmembers){
for(wq in 1:num_wq_vars){
index <- which(x[1,m,] < 0.0)
index <- index[which(index > wq_start[1])]
x[1,m,index] <- 0.0
}
}
}
write.csv(x[1,,],paste0(workingGLM,'/','restart_',year(full_time[1]),'_',month(full_time[1]),'_',day(full_time[1]),'_cold.csv'),row.names = FALSE)
}
#THIS ALLOWS THE EnKF TO BE RESTARTED FROM YESTERDAY'S RUN
if(restart_present){
print('Using restart file')
nc <- nc_open(restart_file)
restart_nmembers <- length(ncvar_get(nc,'ens'))
if(restart_nmembers > nmembers){
#sample restart_nmembers
sampled_nmembers <- sample(seq(1,restart_nmembers,1),nmembers,replace=FALSE)
restart_x_previous <- ncvar_get(nc, "x_restart")
x_previous <- restart_x_previous[sampled_nmembers,]
if(INITIAL_CONDITION_UNCERTAINITY == FALSE & hist_days == 0){
x_previous_1 <- colMeans(x_previous)
for(m in 1:nmembers){
x_previous[m,] <- x_previous_1
}
}
}else if(restart_nmembers < nmembers){
sampled_nmembers <- sample(seq(1,restart_nmembers,1),nmembers,replace=TRUE)
restart_x_previous <- ncvar_get(nc, "x_restart")
x_previous <- restart_x_previous[sampled_nmembers,]
if(INITIAL_CONDITION_UNCERTAINITY == FALSE & hist_days == 0){
x_previous_1 <- colMeans(x_previous)
for(m in 1:nmembers){
x_previous[m,] <- x_previous_1
}
}
}else{
x_previous <- ncvar_get(nc, "x_restart")
if(INITIAL_CONDITION_UNCERTAINITY == FALSE & hist_days == 0){
x_previous_1 <- colMeans(x_previous)
for(m in 1:nmembers){
x_previous[m,] <- x_previous_1
}
}
}
#Qt <- ncvar_get(nc, "Qt_restart")
nc_close(nc)
}else{
x_previous <- read.csv(paste0(workingGLM,'/','restart_',year(full_time[1]),'_',month(full_time[1]),'_',day(full_time[1]),'_cold.csv'))
}
#Set initial conditions
x[1,,] <- as.matrix(x_previous)
x_prior[1,,] <- as.matrix(x_previous)
#Matrix to store essemble specific surface height
surface_height <- array(NA,dim=c(nsteps,nmembers))
surface_height[1,] <- lake_depth_init
#Create a copy of the NML to record starting parameters
file.copy(from = paste0(workingGLM,'/','glm3.nml'), to = paste0(workingGLM,'/','glm3_initial.nml'),overwrite = TRUE)
###START EnKF
met_index <- 1
i = 2
#1) Update GLM NML files to match the current day of the simulation
curr_start <- (full_time[i-1])
curr_stop <- (full_time[i])
update_time(start_value  = curr_start, stop_value = curr_stop,workingGLM)
setwd(workingGLM)
#Create array to hold GLM predictions for each ensemble
x_star <- array(NA, dim = c(nmembers,nstates))
x_corr <- array(NA, dim = c(nmembers,nstates))
pars_corr <-  array(NA, dim = c(nmembers,npars))
#Matrix to store calculated ensemble specific deviations and innovations
dit <- array(NA,dim=c(nmembers,nstates))
dit_pars<- array(NA,dim=c(nmembers,npars))
m = 1
tmp <- update_temps(curr_temps = round(x[i-1,m,temp_start:temp_end],3),the_depths_init,workingGLM)
update_var(surface_height[i-1,m],'lake_depth',workingGLM)
if(npars > 0){
if(i > (hist_days+1)){
new_pars <- x[i-1,m,(nstates+1):(nstates+npars)]
if(PARAMETER_UNCERTAINITY == FALSE){
new_pars <- mean(x[i-1,,(nstates+1):(nstates+npars)])
}
}else{
new_pars <- rmvnorm(n=1, mean = c(x[i-1,m,(nstates+1):(nstates+npars)]),sigma=as.matrix(Qt_pars))
}
update_var(c(round(new_pars[1],3),round(new_pars[2],3)),'sed_temp_mean',workingGLM)
update_var(round(new_pars[3],3),'sw_factor',workingGLM)
update_var(round(new_pars[3],3),'lw_factor',workingGLM)
pars_corr[m,] <- new_pars
}
if(include_wq){
wq_init_vals <- round(c(x[i-1,m,wq_start[1]:wq_end[num_wq_vars]]),3)
update_var(wq_init_vals,'wq_init_vals',workingGLM)
}
#ALLOWS THE LOOPING THROUGH NOAA ENSEMBLES
if(!PRE_SCC){
if(i > (hist_days+1)){
update_var(met_file_names[met_index],'meteo_fl',workingGLM)
update_var(paste0('FCR_inflow.csv'),'inflow_fl',workingGLM)
update_var(paste0('FCR_spillway_outflow.csv'),'outflow_fl',workingGLM)
}else{
update_var(obs_met_outfile,'meteo_fl',workingGLM)
update_var(paste0('FCR_inflow.csv'),'inflow_fl',workingGLM)
update_var(paste0('FCR_spillway_outflow.csv'),'outflow_fl',workingGLM)
}
}
#Use GLM NML files to run GLM for a day
# Only allow simulations without NaN values in the output to proceed.  Necessary due to random
# Nan in AED output
pass <- FALSE
num_reruns <- 0
while(!pass){
unlink(paste0(workingGLM,'/output.nc'))
system(paste0(workingGLM,'/','glm'))
if(file.exists(paste0(workingGLM,'/output.nc')) & !has_error(nc<-nc_open('output.nc'))){
if(length(ncvar_get(nc,'time')) > 1){
nc_close(nc)
if(include_wq){
GLM_temp_wq_out <- get_glm_nc_var_all_wq(ncFile = 'output.nc',z_out = the_depths_init,vars = glm_output_vars)
x_star[m,1:(nstates-npars)] <- c(GLM_temp_wq_out$output)
}else{
GLM_temp_wq_out <- get_glm_nc_var_all_wq(ncFile = 'output.nc',z_out = the_depths_init,vars = 'temp')
x_star[m,temp_start:temp_end] <- c(GLM_temp_wq_out$output)
}
surface_height[i,m] <- GLM_temp_wq_out$surface_height
if(length(which(is.na(x_star[m,])))==0){
pass = TRUE
}else{
num_reruns <- num_reruns + 1
}
}else{
num_reruns <- num_reruns + 1
}
}else{
num_reruns <- num_reruns + 1
}
if(num_reruns > 1000){
stop(paste0('Too many re-runs (> 1000) due to NaN values in output'))
}
}
#INCREMENT THE MET_INDEX TO MOVE TO THE NEXT NOAA ENSEMBLE
met_index = met_index + 1
if(met_index > nMETmembers | WEATHER_UNCERTAINITY == FALSE){
met_index <- 1
}
}
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
system(paste0(workingGLM,'/','glm'))
