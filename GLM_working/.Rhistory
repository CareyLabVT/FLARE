obs_chla_fdom$Chla_obs[i,] <- obs_ctd$obs_chla[i, ]
}
}
init_pH_obs <- obs_ctd$obs_pH[1, which(!is.na(obs_ctd$obs_pH[1, ]))]
init_obs_pH_depths <- modeled_depths[which(!is.na(obs_ctd$obs_pH[1, ]))]
init_sal_obs <- obs_ctd$obs_sal[1, which(!is.na(obs_ctd$obs_sal[1, ]))]
init_obs_sal_depths <- modeled_depths[which(!is.na(obs_ctd$obs_sal[1, ]))]
}
init_temps_obs <- obs_temp$obs[1, which(!is.na(obs_temp$obs[1, ]))]
init_obs_temp_depths <- modeled_depths[which(!is.na(obs_temp$obs[1, ]))]
init_do_obs <- obs_do$obs[1, which(!is.na(obs_do$obs[1, ]))]
init_obs_do_depths <- modeled_depths[which(!is.na(obs_do$obs[1, ]))]
#NEED AN ERROR CHECK FOR WHETHER THERE ARE OBSERVED DATA
if(is.na(restart_file)){
if((length(which(init_temps_obs != 0.0)) == 0) |
length(which(is.na(init_temps_obs))) > 0){
print("Pick another start day or provide an initial condition file:
observations not avialable for starting day")
break
}
temp_inter <- approxfun(init_obs_temp_depths, init_temps_obs, rule=2)
the_temps_init <- temp_inter(modeled_depths)
if(include_wq){
do_inter <- approxfun(init_obs_do_depths, init_do_obs, rule=2)
do_init <- do_inter(modeled_depths)
if(length(which(!is.na(init_pH_obs))) > 0){
pH_inter <- approxfun(init_obs_pH_depths, init_pH_obs, rule=2)
pH_init <- pH_inter(modeled_depths)
}
}
}
wq_start <- NA
wq_end <- NA
if(include_wq){
temp_start <- 1
temp_end <- length(modeled_depths)
wq_start <- rep(NA, num_wq_vars)
wq_end <- rep(NA, num_wq_vars)
for(wq in 1:num_wq_vars){
if(wq == 1){
wq_start[wq] <- temp_end+1
wq_end[wq] <- temp_end + (length(modeled_depths))
}else{
wq_start[wq] <- wq_end[wq-1]+1
wq_end[wq] <- wq_end[wq-1] + (length(modeled_depths))
}
if(npars > 0){ #NEED TO GENERALIZE
par1 <- wq_end[num_wq_vars] + 1
par2 <- par1 + 1
par3 <-  par2 + 1
}else{
par1 <- wq_end[num_wq_vars]
par2 <- wq_end[num_wq_vars]
par3 <- wq_end[num_wq_vars]
}
}
}else{
temp_start <- 1
temp_end <- length(modeled_depths)
if(npars > 0){
par1 <- temp_end + 1
par2 <- par1 + 1
par3 <-  par2 + 1
}else{
par1 <- temp_end
par2 <- temp_end
par3 <- temp_end
}
}
#UPDATE NML WITH PARAMETERS AND INITIAL CONDITIONS
#Initial States
the_sals_init <- 0.0
OXY_oxy_init <- 300.62
CAR_pH_init <- 6.5
CAR_dic_init <- 59.1
CAR_ch4_init <- 0.58
SIL_rsi_init <- 300
NIT_amm_init <- 0.69
NIT_nit_init <- 0.05
PHS_frp_init <- 0.07
OGM_doc_init <- 47.4
OGM_poc_init <- 78.5
OGM_don_init <- 1.3
OGM_pon_init <- 8.3
OGM_dop_init <- 1.5
OGM_pop_init <- 8.3
PHY_CYANOPCH1_init <- 2.0
PHY_CYANONPCH2_init <-2.0
PHY_CHLOROPCH3_init <-2.0
PHY_DIATOMPCH4_init <- 2.0
ZOO_COPEPODS1_init <- 2.9
ZOO_DAPHNIABIG2_init <- 4.3
ZOO_DAPHNIASMALL3_init <- 40
OXY_oxy_error <- OXY_oxy_init*1.0
CAR_pH_error <- CAR_pH_init*0.001
CAR_dic_error <- CAR_dic_init*0.001
CAR_ch4_error <- CAR_ch4_init*0.001
SIL_rsi_error <- SIL_rsi_init*0.001
NIT_amm_error <- NIT_amm_init*0.001
NIT_nit_error <- NIT_nit_init*0.001
PHS_frp_error <- PHS_frp_init*0.001
OGM_doc_error <- OGM_doc_init*0.001
OGM_poc_error <- OGM_poc_init*0.001
OGM_don_error <- OGM_don_init*0.001
OGM_pon_error <- OGM_pon_init*0.001
OGM_dop_error <- OGM_dop_init*0.001
OGM_pop_error <- OGM_pop_init*0.001
PHY_CYANOPCH1_error <- PHY_CYANOPCH1_init*0.01
PHY_CYANONPCH2_error <-PHY_CYANONPCH2_init*0.01
PHY_CHLOROPCH3_error <-PHY_CHLOROPCH3_init*0.01
PHY_DIATOMPCH4_error <- PHY_DIATOMPCH4_init*0.01
ZOO_COPEPODS1_error <- ZOO_COPEPODS1_init*0.001
ZOO_DAPHNIABIG2_error <- ZOO_DAPHNIABIG2_init*0.001
ZOO_DAPHNIASMALL3_error <- ZOO_DAPHNIASMALL3_init*0.001
wq_var_error <- c(OXY_oxy_error,
CAR_pH_error,
CAR_dic_error,
CAR_ch4_error,
SIL_rsi_error,
NIT_amm_error,
NIT_nit_error,
PHS_frp_error,
OGM_doc_error,
OGM_poc_error,
OGM_don_error,
OGM_pon_error,
OGM_dop_error,
OGM_pop_error,
PHY_CYANOPCH1_error,
PHY_CYANONPCH2_error,
PHY_CHLOROPCH3_error,
PHY_DIATOMPCH4_error,
ZOO_COPEPODS1_error,
ZOO_DAPHNIABIG2_error,
ZOO_DAPHNIASMALL3_error)
if(include_wq){
OXY_oxy_init_depth <- do_init
}else{
OXY_oxy_init_depth <- rep(OXY_oxy_init, ndepths_modeled)
}
if(include_wq & use_ctd){
CAR_pH_init_depth <- pH_init
}else{
CAR_pH_init_depth <- rep(CAR_pH_init, ndepths_modeled)
}
CAR_dic_init_depth <- rep(CAR_dic_init, ndepths_modeled)
CAR_ch4_init_depth <- rep(CAR_ch4_init, ndepths_modeled)
SIL_rsi_init_depth <- rep(SIL_rsi_init, ndepths_modeled)
NIT_amm_init_depth <- rep(NIT_amm_init, ndepths_modeled)
NIT_nit_init_depth <- rep(NIT_nit_init, ndepths_modeled)
PHS_frp_init_depth <- rep(PHS_frp_init, ndepths_modeled)
OGM_doc_init_depth <- rep(OGM_doc_init, ndepths_modeled)
OGM_poc_init_depth <- rep(OGM_poc_init, ndepths_modeled)
OGM_don_init_depth <- rep(OGM_don_init, ndepths_modeled)
OGM_pon_init_depth <- rep(OGM_pon_init, ndepths_modeled)
OGM_dop_init_depth <- rep(OGM_dop_init, ndepths_modeled)
OGM_pop_init_depth <- rep(OGM_pop_init, ndepths_modeled)
PHY_CYANOPCH1_init_depth <- rep(PHY_CYANOPCH1_init, ndepths_modeled)
PHY_CYANONPCH2_init_depth <- rep(PHY_CYANONPCH2_init, ndepths_modeled)
PHY_CHLOROPCH3_init_depth <- rep(PHY_CHLOROPCH3_init, ndepths_modeled)
PHY_DIATOMPCH4_init_depth <- rep(PHY_DIATOMPCH4_init, ndepths_modeled)
ZOO_COPEPODS1_init_depth <- rep(ZOO_COPEPODS1_init, ndepths_modeled)
ZOO_DAPHNIABIG2_init_depth <- rep(ZOO_DAPHNIABIG2_init, ndepths_modeled)
ZOO_DAPHNIASMALL3_init_depth <- rep(ZOO_DAPHNIASMALL3_init, ndepths_modeled)
if(full_time_day_local[1] ==
strftime("2018-07-09",format="%Y-%m-%d",tz = "EST5EDT") &
include_wq){
curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9,10)
#mg/L
curr_values <- c(3.764, 3.781, 3.578, 5.156, 5.2735, 5.5165, 5.222, 5.368)
curr_values <- (curr_values*1000)/(10*12)
inter <- approxfun(curr_depths,curr_values,rule=2)
CAR_dic_init_depth <- inter(modeled_depths)
curr_depths <- c(0.1,1.6,3.8,5,6.2,8,9,9.5)
#umol CH4/L
curr_values <- c(3.91E-04,0.370572728,0.107597836,0.126096596,
0.088502664,0.086276629,0.07256043,0.07249431)
curr_values <- curr_values*1000
inter <- approxfun(curr_depths,curr_values,rule=2)
CAR_ch4_init_depth <- inter(modeled_depths)
curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
#ug/L
curr_values <- c(12.65291714,4.213596723,10.5935375,13.43611258,
11.34765394,11.95676704,11.98577285,12.82695814)
curr_values <- (curr_values*1000)/14
inter <- approxfun(curr_depths,curr_values,rule=2)
NIT_amm_init_depth <- inter(modeled_depths)
curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
curr_values <-c(5.68,3.82,4.46,3.71,4.18,5.08,3.01,7.72)
curr_values <- (curr_values*1000)/14
#ug/L
inter <- approxfun(curr_depths,curr_values,rule=2)
NIT_nit_init_depth <- inter(modeled_depths)
curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
#ug/L
curr_values <- c(8.96,7.66,6.26,6.22,7.72,9.69,7.95,10.5)
curr_values <- (curr_values*1000)/18
inter <- approxfun(curr_depths,curr_values,rule=2)
PHS_frp_init_depth <- inter(modeled_depths)
curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
##mg/L
curr_values <- c(4.2315,4.374, 3.2655,2.9705,2.938,2.922,2.773,2.9525)
curr_values <- (curr_values*1000)/(10*12)
inter <- approxfun(curr_depths,curr_values,rule=2)
OGM_doc_init_depth <- inter(modeled_depths)
curr_depths <- c(0.1,1.6,3.8,5,6.2,8, 9, 10)
##mg/L
curr_values <- c(0.2855,0.261,0.218,0.2135,0.2185,0.223,0.2025,0.2065)
curr_values <- (curr_values*1000)/(10*14)
inter <- approxfun(curr_depths,curr_values,rule=2)
DN_init_depth <- inter(modeled_depths)
OGM_don_init_depth <- DN_init_depth - NIT_amm_init_depth - NIT_nit_init_depth
}
wq_init_vals <- c(OXY_oxy_init_depth,
CAR_pH_init_depth,
CAR_dic_init_depth,
CAR_ch4_init_depth,
SIL_rsi_init_depth,
NIT_amm_init_depth,
NIT_nit_init_depth,
PHS_frp_init_depth,
OGM_doc_init_depth,
OGM_poc_init_depth,
OGM_don_init_depth,
OGM_pon_init_depth,
OGM_dop_init_depth,
OGM_pop_init_depth,
PHY_CYANOPCH1_init_depth,
PHY_CYANONPCH2_init_depth,
PHY_CHLOROPCH3_init_depth,
PHY_DIATOMPCH4_init_depth,
ZOO_COPEPODS1_init_depth,
ZOO_DAPHNIABIG2_init_depth,
ZOO_DAPHNIASMALL3_init_depth)
#UPDATE NML WITH PARAMETERS AND INITIAL CONDITIONS
if(include_wq){
update_var(wq_init_vals, "wq_init_vals", working_glm)
update_var(num_wq_vars, "num_wq_vars", working_glm)
}else{
update_var(" ", "wq_init_vals", working_glm)
update_var(0, "num_wq_vars", working_glm)
}
update_var(ndepths_modeled, "num_depths", working_glm)
update_var(modeled_depths, "the_depths", working_glm)
update_var(rep(the_sals_init, ndepths_modeled), "the_sals", working_glm)
#Create a copy of the NML to record starting parameters
file.copy(from = paste0(working_glm, "/", "glm3.nml"),
to = paste0(working_glm, "/", "glm3_initial.nml"), overwrite = TRUE)
#NUMBER OF STATE SIMULATED = SPECIFIED DEPTHS
if(include_wq){
nstates <- ndepths_modeled*(1+num_wq_vars)
}else{
nstates <- ndepths_modeled
}
if(include_wq){
#NEED TO ADD ADDITIONAL OBSERVATION TYPES
nobs <- length(observed_depths_temp) + length(observed_depths_do)
}else{
nobs <- length(observed_depths_temp)
}
if(include_wq){
z <- cbind(obs_temp$obs, obs_do$obs)
}else{
z <- cbind(obs_temp$obs)
}
z_obs <- z
if(!use_obs_constraint){
z[, ] <- NA
}
#FIGURE OUT WHICH DEPTHS HAVE OBSERVATIONS
if(include_wq){
obs_index <- rep(NA,length(modeled_depths)*(num_wq_vars+1))
obs_index[1:length(modeled_depths)] <- seq(1, length(modeled_depths), 1)
for(wq in 1:num_wq_vars){
obs_index[wq_start[wq]:wq_end[wq]] <- seq(wq_start[wq], wq_end[wq], 1)
}
}else{
obs_index <- rep(NA,length(modeled_depths))
obs_index[1:length(modeled_depths)] <- seq(1, length(modeled_depths), 1)
}
#Matrix for knowing which state the observation corresponds to
z_states <- t(matrix(obs_index, nrow = length(obs_index), ncol = nsteps))
#Process error
if(is.na(cov_matrix)){
qt <- read.csv(paste0(working_glm, "/", "qt_cov_matrix.csv"))
}else{
qt <- read.csv(paste0(working_glm, "/", cov_matrix))
}
if(include_wq){
for(i in 1:num_wq_vars){
for(j in 1:ndepths_modeled){
qt <- rbind(qt, rep(0.0, ncol(qt)))
qt <- cbind(qt, rep(0.0, nrow(qt)))
qt[ncol(qt),nrow(qt)] <- wq_var_error[i]
}
}
}
#Covariance matrix for parameters
qt_pars <- matrix(data = 0, nrow = npars, ncol = npars)
diag(qt_pars) <- c(zone1temp_init_qt, zone2temp_init_qt, swf_lwf_init_qt)
psi <- rep(obs_error, length(obs_index))
################################################################
#### STEP 11: CREATE THE X ARRAY (STATES X TIME);INCLUDES INITIALATION
################################################################
nmembers <- n_enkf_members*n_met_members*n_ds_members
restart_present <- FALSE
if(!is.na(restart_file)){
if(file.exists(restart_file)){
restart_present <- TRUE
}
}
x <- array(NA, dim=c(nsteps, nmembers, nstates + npars))
#Initial conditions
if(!restart_present){
if(include_wq){
if(npars > 0){
x[1, ,1:nstates] <- rmvnorm(n=nmembers,
mean=c(the_temps_init,
wq_init_vals),
sigma=as.matrix(qt))
x[1, ,(nstates+1):(nstates+npars)] <- rmvnorm(n=nmembers,
mean=c(zone1_temp,
zone2_temp,
swf_lwf_init),
sigma = as.matrix(qt_pars))
if(initial_condition_uncertainity == FALSE){
for(m in 1:nmembers){
x[1,m, ] <- c(the_temps_init,
wq_init_vals,
zone1_temp,
zone2_temp,
swf_lwf_init)
}
}
}else{
x[1, , ] <- rmvnorm(n=nmembers,
mean=c(the_temps_init,wq_init_vals),
sigma=as.matrix(qt))
if(initial_condition_uncertainity == FALSE){
for(m in 1:nmembers){
x[1, m, ] <- c(the_temps_init, do_init, wq_init_vals)
}
}
}
}else{
if(npars > 0){
x[1, ,1:nstates] <- rmvnorm(n=nmembers,
mean=the_temps_init,
sigma=as.matrix(qt))
x[1, ,(nstates+1):(nstates+npars)] <- rmvnorm(n=nmembers,
mean=c(zone1_temp,
zone2_temp,
swf_lwf_init),
sigma = as.matrix(qt_pars))
if(initial_condition_uncertainity == FALSE){
for(m in 1:nmembers){
x[1, m, ] <- c(the_temps_init, zone1_temp, zone2_temp, swf_lwf_init)
}
}
}else{
x[1, , ] <- rmvnorm(n=nmembers,
mean=the_temps_init,
sigma=as.matrix(qt))
if(initial_condition_uncertainity == FALSE){
for(m in 1:nmembers){
if(npars > 0){
x[1, m, ] <- the_temps_init
}
}
}
}
}
if(include_wq){
for(m in 1:nmembers){
for(wq in 1:num_wq_vars){
index <- which(x[1, m, ] < 0.0)
index <- index[which(index > wq_start[1])]
x[1, m, index] <- 0.0
}
}
}
write.csv(x[1, , ],paste0(working_glm, "/", "restart_",
year(full_time[1]), "_",
month(full_time[1]), "_",
day(full_time[1]), "_cold.csv"),
row.names = FALSE)
}
#THIS ALLOWS THE EnKF TO BE RESTARTED FROM YESTERDAY"S RUN
if(restart_present){
print("Using restart file")
nc <- nc_open(restart_file)
restart_nmembers <- length(ncvar_get(nc, "ens"))
if(restart_nmembers > nmembers){
#sample restart_nmembers
sampled_nmembers <- sample(seq(1, restart_nmembers, 1),
nmembers,
replace=FALSE)
restart_x_previous <- ncvar_get(nc, "x_restart")
x_previous <- restart_x_previous[sampled_nmembers, ]
if(initial_condition_uncertainity == FALSE & hist_days == 0){
x_previous_1 <- colMeans(x_previous)
for(m in 1:nmembers){
x_previous[m, ] <- x_previous_1
}
}
}else if(restart_nmembers < nmembers){
sampled_nmembers <- sample(seq(1, restart_nmembers, 1),
nmembers,
replace = TRUE)
restart_x_previous <- ncvar_get(nc, "x_restart")
x_previous <- restart_x_previous[sampled_nmembers, ]
if(initial_condition_uncertainity == FALSE & hist_days == 0){
x_previous_1 <- colMeans(x_previous)
for(m in 1:nmembers){
x_previous[m, ] <- x_previous_1
}
}
}else{
x_previous <- ncvar_get(nc, "x_restart")
if(initial_condition_uncertainity == FALSE & hist_days == 0){
x_previous_1 <- colMeans(x_previous)
for(m in 1:nmembers){
x_previous[m, ] <- x_previous_1
}
}
}
nc_close(nc)
}else{
x_previous <- read.csv(paste0(working_glm, "/", "restart_",
year(full_time[1]), "_",
month(full_time[1]), "_",
day(full_time[1]), "_cold.csv"))
}
#Set initial conditions
x[1,,] <- as.matrix(x_previous)
#Matrix to store essemble specific surface height
surface_height <- array(NA, dim=c(nsteps, nmembers))
surface_height[1, ] <- lake_depth_init
enkf_output <- GLM_EnKF(x,
z,
qt,
qt_pars,
psi,
full_time,
working_glm,
npars,
modeled_depths,
surface_height,
wq_start,
wq_end,
met_file_names,
include_wq,
spin_up_days,
z_states,
alpha,
glm_output_vars,
weather_uncertainity,
process_uncertainity,
initial_condition_uncertainity,
parameter_uncertainity)
x <- enkf_output$x
x_restart <- enkf_output$x_restart
qt_restart <- enkf_output$qt_restart
x_prior <- enkf_output$x_prior
#Matrix to store essemble specific surface height
surface_height <- array(NA, dim=c(nsteps, nmembers))
surface_height[1, ] <- lake_depth_init
enkf_output <- GLM_EnKF(x,
z,
qt,
qt_pars,
psi,
full_time,
working_glm,
npars,
modeled_depths,
surface_height,
wq_start,
wq_end,
met_file_names,
include_wq,
spin_up_days,
z_states,
alpha,
glm_output_vars,
weather_uncertainity,
process_uncertainity,
initial_condition_uncertainity,
parameter_uncertainity)
library(ncdf4)
enkf_output <- GLM_EnKF(x,
z,
qt,
qt_pars,
psi,
full_time,
working_glm,
npars,
modeled_depths,
surface_height,
wq_start,
wq_end,
met_file_names,
include_wq,
spin_up_days,
z_states,
alpha,
glm_output_vars,
weather_uncertainity,
process_uncertainity,
initial_condition_uncertainity,
parameter_uncertainity)
